{
    "author": "Anaren Inc.",
    "categories": [
        "Lightning",
        "Sensor"
    ],
    "code": {
        "connected": "",
        "global": "",
        "interval": "",
        "setup": ""
    },
    "description": "What if you need to know when the approaching storm is going to be overhead?\n The MOD-1016, based on the AS3935 from AMS, can detect storm front up to 40km away.\n Trigger interrupts on your microcontroller to let you know about weather events and changes in storm distance,\n you can even tell as storm fronts move closer or further away.",
    "elements": {
        "lightningDistance": {
            "code": "",
            "icon": null,
            "inputType": "void",
            "label": "Lightning Distance",
            "language": {
                "en": {
                    "label": "Lightning Distance"
                }
            },
            "returnType": "int"
        }
    },
    "files": {
        "common": {
            "headers": {
                "as3935.h": "// Copyright (c) 2016, Anaren Inc.\n// All rights reserved.\n//\n// Redistribution and use in source and binary forms, with or without\n// modification, are permitted provided that the following conditions are met:\n//\n// 1. Redistributions of source code must retain the above copyright notice, this\n//    list of conditions and the following disclaimer.\n// 2. Redistributions in binary form must reproduce the above copyright notice,\n//    this list of conditions and the following disclaimer in the documentation\n//    and/or other materials provided with the distribution.\n//\n// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND\n// ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n// WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n// DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR\n// ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n// (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\n// LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n// ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\n// SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n//\n// The views and conclusions contained in the software and documentation are those\n// of the authors and should not be interpreted as representing official policies,\n// either expressed or implied, of the FreeBSD Project.\n\n#ifndef AS3935_H\n#define AS3935_H\n\n#include \"../i2c/i2c.h\"\n#include \"as3935_config.h\"\n#include <stdint.h>\n\n//------------------------------------------------------------------------------\n/**\n *  Defines, enumerations, and structure definitions\n */\n#ifndef bool\n#define bool uint8_t\n#endif\n\n#ifndef true\n#define true 1\n#endif\n\n#ifndef false\n#define false 0\n#endif\n\n//------------------------------------------------------------------------------\n/**\n *  Defines, enumerations, and structure definitions\n */\n\n//The MOD-1016 Board uses I2C Address 0x03 since both SD0 and SD1 pins are pulled high.\n#define AS3935_I2C_BASE_ADDR      \t  0x03\n\n#define AS3935_PWD_AFEGB_REG_ADDR     0x00\n#define AS3935_NFLV_WDTH_REG_ADDR     0x01\n#define AS3935_MIN_LIGHT_REG_ADDR     0x02\n#define AS3935_MASK_DIST_REG_ADDR     0x03\n#define AS3935_LIGHT_LSB_REG_ADDR     0x04\n#define AS3935_LIGHT_MSB_REG_ADDR     0x05\n#define AS3935_LIGHT_MMS_REG_ADDR     0x06\n#define AS3935_DIST_ESTI_REG_ADDR     0x07\n#define AS3935_DISP_IRQ_REG_ADDR      0x08\n\n//Lightning Detection Lookup Table\n#define AS3935_LDLUT1_REG_ADDR        0x09\n#define AS3935_LDLUT2_REG_ADDR        0x0A\n#define AS3935_LDLUT3_REG_ADDR        0x0B\n#define AS3935_LDLUT4_REG_ADDR\t\t  0x0C\n#define AS3935_LDLUT5_REG_ADDR        0x0D\n#define AS3935_LDLUT6_REG_ADDR\t      0x0E\n#define AS3935_LDLUT7_REG_ADDR\t\t  0x0F\n#define AS3935_LDLUT8_REG_ADDR\t\t  0x10\n#define AS3935_LDLUT9_REG_ADDR\t\t  0x11\n#define AS3935_LDLUT10_REG_ADDR\t\t  0x12\n#define AS3935_LDLUT11_REG_ADDR\t\t  0x13\n#define AS3935_LDLUT12_REG_ADDR\t\t  0x14\n#define AS3935_LDLUT13_REG_ADDR\t\t  0X15\n#define AS3935_LDLUT14_REG_ADDR\t\t  0X16\n#define AS3935_LDLUT15_REG_ADDR\t\t  0X17\n#define AS3935_LDLUT16_REG_ADDR\t\t  0X18\n#define AS3935_LDLUT17_REG_ADDR\t\t  0X19\n#define AS3935_LDLUT18_REG_ADDR\t\t  0X1A\n#define AS3935_LDLUT19_REG_ADDR\t\t  0X1B\n#define AS3935_LDLUT20_REG_ADDR\t\t  0X1C\n#define AS3935_LDLUT21_REG_ADDR\t\t  0X1D\n#define AS3935_LDLUT22_REG_ADDR\t\t  0X1E\n#define AS3935_LDLUT23_REG_ADDR\t\t  0X1F\n#define AS3935_LDLUT24_REG_ADDR\t\t  0X20\n#define AS3935_LDLUT25_REG_ADDR\t\t  0X21\n#define AS3935_LDLUT26_REG_ADDR\t\t  0X22\n#define AS3935_LDLUT27_REG_ADDR\t\t  0X23\n#define AS3935_LDLUT28_REG_ADDR\t\t  0X24\n#define AS3935_LDLUT29_REG_ADDR\t\t  0X25\n#define AS3935_LDLUT30_REG_ADDR\t\t  0X26\n#define AS3935_LDLUT31_REG_ADDR\t\t  0X27\n#define AS3935_LDLUT32_REG_ADDR\t\t  0X28\n#define AS3935_LDLUT33_REG_ADDR\t\t  0X29\n#define AS3935_LDLUT34_REG_ADDR\t\t  0X2A\n#define AS3935_LDLUT35_REG_ADDR\t\t  0X2B\n#define AS3935_LDLUT36_REG_ADDR\t\t  0X2C\n#define AS3935_LDLUT37_REG_ADDR\t\t  0X2D\n#define AS3935_LDLUT38_REG_ADDR\t\t  0X2E\n#define AS3935_LDLUT39_REG_ADDR\t\t  0X2F\n#define AS3935_LDLUT40_REG_ADDR\t\t  0X30\n#define AS3935_LDLUT41_REG_ADDR\t\t  0X31\n#define AS3935_LDLUT42_REG_ADDR\t\t  0X32\n\n/**\n * It is possible to send direct commands writing 0x96 to the registers\n * REG0x3C and REG0x3D.\n */\n#define AS3935_PRESET_DEF_REG_ADDR    0x3C\n#define AS3935_CALIBR_RCO_REG_ADDR    0x3D\n#define AS3935_DIRECT_CMD_REG_VALU    0x96\n\n\n/**\n * MASKS and other values.\n *\n *\n */\n#define AFE_MASK\t0b11000001\n#define AFE_OUTDOOR\t0b00100100\n#define AFE_INDOOR\t0b00011100\n\n/**\n *  eAS3935Mode - type indicating the operating mode of the AS3935 device.  The\n *  AS3935 offers three modes: Power Down, Listening, and Signal Verification.  When\n *  ultra-low power consumption is important, the application should place the\n *  device in Power Down Mode when lightning measurements are not needed.\n *\n *  In Listening Mode the Analog Front End (AFE), noise floor level generation,\n *  the bias block, the TRCO, and the voltage regulator (if enabled) are running.\n *\tIn this mode the system can push down the power consumption to a minimum,\n *\t(60\ufffdA). In case the maximum voltage supply does not exceed 3.6V,\n *\tit is possible to switch off the voltage regulator to save power.\n *\n *  The AS3935 enters Signal Verification Mode when the watchdog detects activity\n *  picked up by the antenna. The IC will leave this mode either if the incoming signal\n *  is classified as a disturber or if the analysis of the single event (lightning)\n *  is finished. If the received signal is classified as a disturber, then the AS3935\n *  will automatically go back to listening mode without any needed action from outside\n *  and an interrupt will be generated. If the received pattern matches all requirements,\n *  the energy calculation is performed and the AS3935 provides distance estimation.\n *\n */\nenum eAS3935Mode\n{\n  AS3935_PowerDown             = 0x0000,\n  AS3935_Listening\t\t\t   = 0x0001,\n  AS3935_SignalVerification    = 0x7000\n};\n\n/**\nWrite a 16-bit value to a device register.  This function does not do any\nform of error checking, so trying to write to one of the read-only registers may\nresult in undesireable behavior.\n@param id device ID (0 to 7) on i2c bus\n@param addr device register address\n@param data data to be written to the specified register address\n*/\nvoid AS3935_WriteReg(uint8_t id, uint8_t addr, uint16_t data);\n\n/**\nRead a 16-bit value from a device register.\n@param id device ID (0 to 7) on i2c bus\n@param addr device register address\n@return data read from the specified register address\n*/\nuint16_t AS3935_ReadReg(uint8_t id, uint8_t addr);\n\n/**\nIssue a software reset to the sensor.\n@param id device ID (0 to 7) on i2c bus\n@note This is a self-clearing operation.  There is no need for software to clear\nthe reset condition.\n*/\nvoid AS3935_SoftwareReset(uint8_t id);\n\n/**\nSelect the device operating mode.  Refer to eAS3935Mode definition for details\nregarding the allowed states.\n@param id device ID (0 to 7) on i2c bus\n@param mode specifies the device mode of operation\n*/\nvoid AS3935_SetOperatingMode(uint8_t id, enum eAS3935Mode mode);\n\n/**\nRead the currently selected operating mode.  Refer to eAS3935Mode definition for\ndetails regarding the available states.\n@param id device ID (0 to 7) on i2c bus\n@return device mode of operation\n*/\nenum eAS3935Mode AS3935_GetOperatingMode(uint8_t id);\n"
            },
            "objects": {
                "as3935_common.c": "/**\n *  ----------------------------------------------------------------------------\n *  Copyright (c) 2016, Anaren Microwave, Inc.\n *\n *  For more information on licensing, please see Anaren Microwave, Inc's\n *  end user software licensing agreement: EULA.txt.\n *\n *  ----------------------------------------------------------------------------\n *\n *  as3935_common.c - driver interface for the ams AG AS3935 Frankling Lightning\n *  Sensor.\n *\n *  @version    1.0.0\n *  @date       19 Sep 2016\n *  @author     Anaren, air@anaren.com\n *\n *  assumptions\n *  ===========\n *  - The i2c driver provides the proper signaling sequences for read & write\n *    operations.\n *  - The i2c driver meets the timing requirements specified in the AS3935\n *    datasheet.\n *\n *  file dependency\n *  ===============\n *  i2c.h : defines the i2c read & write interfaces.\n *\tmath.h : floating point calculations.\n *\tfp_math.h : floating point calculations using fixed point math.  Use when math.h not implemented.\n *\n *  revision history\n *  ================\n *  ver 1.0.00 : 19 September 2016\n *  - initial development, replace this line upon release.\n */\n#include \"as3935.h\"\n\n#ifdef AIR_FLOATING_POINT_AVAILABLE\n#include <math.h>\n#else\n#include \"../fp_math/fp_math.h\"\n#endif\n\n// -----------------------------------------------------------------------------\n/**\n *  Global data\n */\n// -----------------------------------------------------------------------------\n/**\n *  Private interface\n */\n\n\n\n// -----------------------------------------------------------------------------\n/**\n *  Public interface\n */\n\n//Write to specified register on the AS3935\nvoid AS3935_WriteReg(uint8_t id, uint8_t addr, uint8_t data)\n{\n  uint8_t writeBytes[2];\n  writeBytes[0] = addr;\n  writeBytes[1] = data;\n  AIR_I2C_WRITE(AS3935_I2C_BASE_ADDR + id, writeBytes, 2);\n}\n\n//Read data from specified register\nuint8_t AS3935_ReadReg(uint8_t id, uint8_t addr)\n{\n  uint8_t writeBytes[1] = {0};\n  uint8_t readBytes[1] = {0};\n  AIR_I2C_ComboRead(AS3935_I2C_BASE_ADDR + id, writeBytes, 1, readBytes, 1);\n  return readBytes[0];\n}\n\n/**\n * Get the estimated distance to the lightning storm in kilometers.\n * Values beyond 40 are out of range.\n * Values less than 5 mean that the storm is overhead\n*/\nuint8_t AS3935_GetDistanceEstimation(uint8_t id)\n{\n  return AS3935_ReadReg(id, AS3935_DIST_ESTI_REG_ADDR);\n}\n//Calibrate the RC Oscilators automatically.\nvoid AS3935_CalibrateRCO(uint8_t id)\n{\n  AS3935_WriteReg(id, AS3935_CALIBR_RCO_REG_ADDR, AS3935_DIRECT_CMD_REG_VALU);\n}\n\n//Sets all registers in default mode\nvoid AS3935_PresetRegisterDefaults(uint8_t id)\n{\n  AS3935_WriteReg(id, AS3935_PRESET_DEF_REG_ADDR, AS3935_DIRECT_CMD_REG_VALU);\n}\n\n/*\n * Set the analog front end and watchdog operating mode.\n * Refer to as3935.h for possible operating modes.\n */\nvoid AS3935_SetAnalogFrontEnd(uint8_t id, uint8_t mode)\n{\n  uint8_t currentAFESetting;\n  uint8_t newAFESetting;\n  uint8_t currentAFESetting = AS3935_ReadReg(id, AS3935_PWD_AFEGB_REG_ADDR);\n  currentAFESetting = currentAFESetting & AFE_MASK;\n  if (mode == AFE_OUTDOOR)\n\t  newAFESetting = currentAFESetting & AFE_OUTDOOR;\n  \t  AS3935_WriteReg(id, AS3935_PWD_AFEGB_REG_ADDR, newAFESetting);\n  if (mode == AFE_INDOOR)\n\t  newAFESetting = currentAFESetting & AFE_OUTDOOR;\n  \t  AS3935_WriteReg(id, AS3935_PWD_AFEGB_REG_ADDR, newAFESetting);\n}\n\n/**\n * Retrieve the current operating mode of the AFE and watchdog.\n */\nuint8_t AS3935_GetAnalogFrontEnd(uint8_t id)\n{\n  return AS3935_ReadReg(id, AS3935_PWD_AFEGB_REG_ADDR);\n}\n\n"
            },
            "other": {
                "as3935_config.h": ""
            }
        }
    },
    "label": "AS3935 Driver",
    "language": {
        "en": {
            "label": "AS3935 Driver"
        }
    },
    "links": {
        "Datasheet": "http://www.embeddedadventures.com/datasheets/AS3935_Datasheet_EN_v2.pdf",
        "Product Page": "http://www.embeddedadventures.com/as3935_lightning_sensor_module_mod-1016.html",
        "Wiki Page": "https://atmosphere.anaren.com/wiki/AS3935_Driver"
    },
    "manufacturer": "Embedded Adventures",
    "name": "as3935",
    "signature": "",
    "type": "Embedded Library",
    "version": "1.0.0"
}